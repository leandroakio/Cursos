# Definindo o diretório de trabalho
getwd()
setwd("C:/FCD/Machine_Learning/11_Classificação e Regressão com SVMs/1-Cap11-R/R")
# Pacotes
install.packages("gains")
install.packages("pROC")
install.packages("ROSE")
install.packages("mice")
library(dplyr)
library(caret)
library(gains)
library(pROC)
library(ROCR)
library(ROSE)
library(e1071)
library(mice)
dataset_clientes <- read.csv("dados/cartoes_clientes.csv")
View(dataset_clientes)
str(dataset_clientes)
summary(dataset_clientes)
summary(dataset_clientes$card2spent)
dataset_clientes <- dataset_clientes[-1]
View(dataset_clientes)
sapply(dataset_clientes, function(x)sum(is.na(x)))
sapply(dataset_clientes, function(x)sum(is.na(x)))
table(dataset_clientes$Customer_cat)
prop.table(table(dataset_clientes$Customer_cat)) * 100
as.data.frame(table(dataset_clientes$Customer_cat))
# BoxPlot e Histograma
boxplot(dataset_clientes$card2spent)
boxplot(dataset_clientes$card2spent)
summary(dataset_clientes$card2spent)
hist(dataset_clientes$card2spent)
boxplot(dataset_clientes$hourstv)
summary(dataset_clientes$hourstv)
hist(dataset_clientes$hourstv)
plot(dataset_clientes$card2spent, dataset_clientes$hourstv, xlab = "Gasto Cartão", ylab = "Horas TV")
getwd()
setwd("C:/FCD/Machine_Learning/11_Classificação e Regressão com SVMs/1-Cap11-R/R")
install.packages("gains")
install.packages("pROC")
install.packages("ROSE")
install.packages("mice")
library(dplyr)
library(caret)
library(gains)
library(pROC)
library(ROCR)
library(ROSE)
library(e1071)
library(mice)
dataset_clientes <- read.csv("dados/cartoes_clientes.csv")
View(dataset_clientes)
dataset_clientes <- dataset_clientes[-1]
View(dataset_clientes)
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(paste(df[[variable]]))
}
return(df)
}
categorical.vars <- c('townsize', 'jobcat', 'retire', 'hometype', 'addresscat',
'cartype', 'carvalue', 'carbought', 'card2', 'gender', 'card2type',
'card2benefit', 'card2benefit', 'bfast', 'internet', 'Customer_cat')
str(dataset_clientes)
dataset_clientes <- to.factors(df = dataset_clientes, variables = categorical.vars)
str(dataset_clientes)
str(dataset_clientes)
View(dataset_clientes)
str(dataset_clientes$gender)
sapply(dataset_clientes, function(x)sum(is.na(x)))
sum(is.na(dataset_clientes))
fac_col <- as.integer(0)
facnames <- names(Filter(is.factor, dataset_clientes)) #salvando lista de variáveis tipo fator na facnames
k = 1
for(i in facnames){
while (k <= 16){
grep(i, colnames(dataset_clientes))
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col <- as.integer(0)
facnames <- names(Filter(is.factor, dataset_clientes))
k = 1
for(i in facnames){
while (k <= 16){
grep(i, colnames(dataset_clientes))
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
fac_col
View(dataset_clientes)
View(dataset_clientes[,-c(fac_col)])
regra_imputacao <- mice((dataset_clientes[,-c(fac_col)]), #filtrando dataset deixando somente colunas quantitativas
m = 1,
maxit = 50,
meth = 'pmm',
seed = 500)
total_data <- complete(regra_imputacao, 1)
View(total_data)
dataset_clientes_final <- cbind(total_data, dataset_clientes[,c(fac_col)])
View(dataset_clientes_final)
dim(dataset_clientes_final)
str(dataset_clientes_final)
str(dataset_clientes_final$gender)
sapply(dataset_clientes_final, function(x)sum(is.na(x)))
sum(is.na(dataset_clientes_final))
sum(is.na(dataset_clientes))
dataset_clientes_final$Customer_cat <- as.factor(dataset_clientes_final$Customer_cat)
str(dataset_clientes_final$Customer_cat)
set.seed(100)
indice_divide_dados <- sample(x = nrow(dataset_clientes_final),
size = 0.8 * nrow(dataset_clientes_final),
replace = FALSE)
View(indice_divide_dados)
View(indice_divide_dados)
View(indice_divide_dados)
indice_divide_dados <- sample(x = nrow(dataset_clientes_final),
size = 0.8 * nrow(dataset_clientes_final),
replace = FALSE)
View(indice_divide_dados)
dados_treino <- dataset_clientes_final[indice_divide_dados,]
dados_teste <- dataset_clientes_final[-indice_divide_dados,]
View(dados_treino)
View(dados_teste)
prop.table(table(dados_treino$Customer_cat)) * 100
set.seed(301)
install.packages("DMwR")
library(DMwR)
dados_treino_balanceados <- SMOTE(Customer_cat ~ ., dados_treino, perc.over = 3000, perc.under = 200)
getwd()
setwd("C:/FCD/Machine_Learning/11_Classificação e Regressão com SVMs/1-Cap11-R/R")
library(dplyr)
library(caret)
library(pROC)
library(e1071)
library(mice)
library(readr)
# Da mesma forma, não manteremos um valor muito abaixo de 0,001 para gamma, pois isso levaria a
# um excesso de ajuste.
set.seed(182)
modelo_grid2 <- tune(svm,
Customer_cat ~ .,
data = dados_treino,
kernel='radial',
ranges = list(cost = c(0.01,0.05,0.1,0.5,1,2),
gamma = c(0.0001,0.001,0.01,.05,0.1,0.01,1,2)))
# Definindo o diretório de trabalho
getwd()
setwd("C:/Users/leand/OneDrive/Documents/GitHub/Cursos/R")
credit <- read.csv("dados/credito.csv")
str(credit)
View(credit)
table(credit$checking_balance)
table(credit$savings_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
set.seed(123)
train_sample <- sample(1000, 900)
credit_train <- credit[train_sample, ]
credit_test  <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
install.packages("C50")
library(C50)
credit_train$default<-as.factor(credit_train$default)
str(credit_train$default)
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary(credit_model)
credit_pred <- predict(credit_model, credit_test)
library(gmodels)
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(credit_test$default,
credit_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('Observado', 'Previsto'))
credit_boost10 <- C5.0(credit_train[-17], credit_train$default, trials = 10)
