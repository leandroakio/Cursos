# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:\FCD\Business_Analytics\03_Trabalhando com BA_parte2\R")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/FCD/Business_Analytics/03_Trabalhando com BA_parte2/R")
getwd()
# Carga de dados
data(mtcars)
View(mtcars)
dim(mtcars)
library(corrplot)
library(plyr)
library(knitr)
library(printr)
library(GGally)
library(ggplot2)
library(MASS)
kable(head(mtcars), align = 'c')
head(mtcars)
kable(head(mtcars), align = 'c')
head(mtcars)
kable(head(mtcars), align = 'c')
head(mtcars)
# Tipos das variáveis e resumo estatístico
str(mtcars)
summary(mtcars)
summary(mtcars$mpg)
sum(is.na(mtcars))
kable(head(mtcars), align = 'c')
head(mtcars)
# Tipos das variáveis e resumo estatístico
str(mtcars)
View(mtcars)
kable(head(mtcars), align = 'c')
head(mtcars)
# Tipos das variáveis e resumo estatístico
str(mtcars)
summary(mtcars)
summary(mtcars$mpg)
sum(is.na(mtcars))
# Percentual de carros por número de cilindros
cyl_freq <- table(mtcars$cyl)
labels <- names(cyl_freq)
percent <- round(cyl_freq/sum(cyl_freq) * 100)
labels <- paste(labels, percent)
labels <- paste(labels, "%", sep = "")
length(labels)
pie(cyl_freq, labels = labels, col = rainbow(length(labels)), main = "% de Carros Por Número de Cilindros")
cyl_freq <- table(mtcars$cyl)
labels <- names(cyl_freq)
table(mtcars$cyl)
count(mtcars, 'carb')
# Percentual de carros por número de cilindros
cyl_freq <- table(mtcars$cyl)
labels <- names(cyl_freq)
percent <- round(cyl_freq/sum(cyl_freq) * 100)
labels <- paste(labels, percent)
labels <- paste(labels, "%", sep = "")
length(labels)
pie(cyl_freq, labels = labels, col = rainbow(length(labels)), main = "% de Carros Por Número de Cilindros")
# Número de carros por HP
count <- table(mtcars$hp)
?barplot
barplot(count,
main = "Carros Por HP",
xlab = "HP",
ylab = "Número de Carros")
?sort
barplot(sort(count, decreasing = TRUE),
main = "Carros Por HP",
xlab = "HP",
ylab = "Número de Carros")
# Scatter Plot
?plot
plot(mtcars$mpg, mtcars$hp, xlab = "MPG (Autonomia)", ylab = "HP (Potência)")
# Histograma da variável alvo
hist(mtcars$mpg)
?hist
hist(mtcars$mpg,
breaks = 10,
xlab = "Milhas Por Galão",
main = "Histograma da Variável MPG",
xlim = range(10:35))
# Boxplot
?boxplot
boxplot(mtcars$mpg)
# Corrplot
?cor
m_cor <- cor(mtcars)
?corrplot
corrplot(m_cor, method = "circle")
ggplot(mtcars, aes(y = mpg,
x = factor(am, labels = c("automatic", "manual")),
fill = factor(am))) +
geom_violin(colour = "black", size = 1) +
xlab("Transmissão") +
ylab("MPG")
cria_plot <- function(data, mapping, method = "loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method = method, ...)
p
}
ggpairs(mtcars, lower = list(continuous = cria_plot))
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:\FCD\Business_Analytics\03_Trabalhando com BA_parte2\R")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/FCD/Business_Analytics/03_Trabalhando com BA_parte2/R")
getwd()
# Pacotes
install.packages("readxl")
library(readxl)
library(e1071)
# Carregando o Dataset
dados <- read_excel("dados/Bola_Futebol.xlsx")
View(dados)
dim(dados)
str(dados)
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/Users/leand\OneDrive/Documents/GitHub/Cursos/Hypotesys_test")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/Users/leand/OneDrive/Documents/GitHub/Cursos/Hypotesys_test")
getwd()
library(readxl)
library(e1071)
dados <- read_excel("dados/Bola_Futebol.xlsx")
View(dados)
dim(dados)
str(dados)
# Verificando valores missing
colSums(is.na(dados))
# Calculando as estatísticas
summary(dados)
# Vetor com o nome das estatísticas
nomes_stats <- c("Média", "Desvio Padrão", "Variância", "Tipo de Bola")
library(readxl)
library(e1071)
dados <- read_excel("dados/Bola_Futebol.xlsx")
View(dados)
dim(dados)
str(dados)
# Verificando valores missing
colSums(is.na(dados))
# Calculando as estatísticas
summary(dados)
# Vetor com o nome das estatísticas
nomes_stats <- c("Média", "Desvio Padrão", "Variância", "Tipo de Bola")
# Calculando as estatísticas para a Bola com Revestimento Atual
dados_stats_atual <- c(round(mean(dados$Atual), digits = 2),
round(sd(dados$Atual), digits = 2),
round(var(dados$Atual), digits = 2),
"Bola com Revestimento Atual")
# Calculando as estatísticas para a Bola com Revestimento Novo
dados_stats_novo <- c(round(mean(dados$Novo), digits = 2),
round(sd(dados$Novo), digits = 2),
round(var(dados$Novo), digits = 2),
"Bola com Revestimento Novo")
# Combina os resultados para comparação
dados_stats_combined <- rbind(nomes_stats, dados_stats_atual, dados_stats_novo)
View(dados_stats_combined)
# Range
range_atual <- max(dados$Atual) - min(dados$Atual)
range_atual
range_novo <- max(dados$Novo) - min(dados$Novo)
range_novo
# Intervalo Interquartil
summary(dados)
IQR_atual <- IQR(dados$Atual)
IQR_atual
IQR_novo <- IQR(dados$Novo)
IQR_novo
# Ajusta a área de plotagem
par(mfrow = c(2,2))
# Histograma
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Novo,
main = "Distância - Bola Com Revestimento Novo",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Green")
# Boxplot
boxplot(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue",
horizontal = TRUE)
boxplot(dados$Novo,
main = "Distância - Bola Com Revestimento Novo",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Green",
horizontal = TRUE)
# O raciocínio inverso é o mesmo.
par(mfrow = c(2,2))
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue")
hist(dados$Novo,
main = "Distância - Bola Com Revestimento Novo",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Green")
# Boxplot
boxplot(dados$Atual,
main = "Distância - Bola Com Revestimento Atual",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Blue",
horizontal = TRUE)
boxplot(dados$Novo,
main = "Distância - Bola Com Revestimento Novo",
xlab = "Distância (metros)",
ylab = "Número de Bolas",
col = "Green",
horizontal = TRUE)
summary(dados$Atual)
summary(dados$Novo)
skewness(dados$Atual)
summary(dados$Atual)
skewness(dados$Novo)
# Uma curtose negativa significa que sua distribuição é mais plana que uma curva normal com a
# mesma média e desvio padrão. O raciocínio inverso é o mesmo.
kurtosis(dados$Atual)
kurtosis(dados$Novo)
shapiro.test(dados$Atual)
shapiro.test(dados$Novo)
teste_hipo <- t.test(dados$Atual, dados$Novo, paired = F, conf.level = 0.95, alternative = "t")
# Carregando o Dataset
dados <- read_excel("dados/Bola_Futebol.xlsx")
setwd("C:/Users/leand/OneDrive/Documents/GitHub/Cursos/Hypotesis_test")
getwd()
library(readxl)
library(e1071)
dados <- read_excel("dados/Bola_Futebol.xlsx")
View(dados)
dim(dados)
str(dados)
teste_hipo <- t.test(dados$Atual, dados$Novo, paired = F, conf.level = 0.95, alternative = "t")
teste_hipo
# Diferença das médias
delta_mean <- mean(dados$Atual) - mean(dados$Novo)
delta_mean
# Desvio padrão da diferença entre os dados
delta_desvio <- sd(dados$Atual - dados$Novo)
delta_desvio
# Size Effect
size_effect = delta_mean/delta_desvio
size_effect
# Power Test - Força do Teste
library(pwr)
dim(dados)
power_teste <- pwr.t.test(n = 40, d = size_effect, sig.level = 0.05, alternative = "t")
power_teste
power_teste
# Tamanho ideal da amostra
tamanho_amostra <- pwr.t.test(power = .95, d = 0.5, type = "t", alternative = "t", sig.level = .05)
tamanho_amostra
